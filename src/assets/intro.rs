use std::path::Path;

use crate::assets::mz::MzExe;

use super::iff::Image;
use ndarray::{concatenate, prelude::*};

#[derive(Clone, Debug)]
pub struct Assets {
    // Slideshow
    pub slides: Vec<Slide>,
    // Main menu images
    pub left: Image,
    pub table1: Image,
    pub table2: Image,
    pub table3: Image,
    pub table4: Image,
    pub hiscores_lq: Image,
    pub hiscores_hq: Image,
    pub font_lq: Image,
    pub font_hq: Image,
    // Main menu text
    pub text_pages: Vec<TextPage>,
    pub left_text_menu: Vec<Vec<u8>>,
    pub left_text_options: Vec<Vec<u8>>,
    // Table warp-in/warp-out LUTs
    pub warp_table: Vec<u8>,
    pub warp_frames: u8,
}

#[derive(Clone, Debug)]
pub struct Slide {
    pub image: Image,
    pub gap_frames: u8,
    pub fade_in_frames: u8,
    pub fade_out_frames: u8,
    pub fade_out_tick: u32,
    pub fade_from_white: bool,
}

#[derive(Copy, Clone, Debug)]
pub enum TableSet {
    Table12,
    Table34,
}

#[derive(Clone, Debug)]
pub enum TextPage {
    HiScores(TableSet),
    Text(Vec<Vec<u8>>),
}

fn get_left_text(exe: &MzExe, off: u16) -> Vec<Vec<u8>> {
    (0..10)
        .map(|i| exe.code_bytes(off + i * 12, 12).to_vec())
        .collect()
}

impl Assets {
    pub fn load(file: impl AsRef<Path>) -> std::io::Result<Self> {
        let exe = MzExe::load(file, 0x80)?;

        let logo0_u = Image::parse(exe.segment(0x3b41));
        let logo0_l = Image::parse(exe.segment(0x4285));
        assert_eq!(logo0_u.cmap, logo0_l.cmap);
        let mut cmap = logo0_u.cmap;
        for i in 0..0x20 {
            let (r, g, b) = cmap[i];
            cmap[i + 0x20] = (r / 2, g / 2, b / 2);
        }
        let logo0 = Image {
            data: concatenate!(
                Axis(1),
                logo0_u.data.slice(s![.., ..139]),
                logo0_l.data.slice(s![.., ..(240 - 139)])
            ),
            cmap,
        };

        let logo1_u = Image::parse(exe.segment(0x4d6a));
        let logo1_l = Image::parse(exe.segment(0x4653));
        assert_eq!(logo1_u.cmap, logo1_l.cmap);
        let logo1 = Image {
            data: concatenate!(
                Axis(1),
                logo1_u.data.slice(s![.., ..125]),
                logo1_l.data.slice(s![.., ..(240 - 125)])
            ),
            cmap: logo1_u.cmap,
        };

        let logo2_u = Image::parse(exe.segment(0x11c2));
        let logo2_l = Image::parse(exe.segment(0x17b2));
        assert_eq!(logo2_u.cmap, logo2_l.cmap);
        let logo2 = Image {
            data: concatenate!(
                Axis(1),
                logo2_u.data.slice(s![.., ..110]),
                logo2_l.data.slice(s![.., ..(240 - 110)])
            ),
            cmap: logo2_u.cmap,
        };

        let mut presents = Image::parse(exe.segment(0x10a6));
        presents.data = concatenate!(Axis(1), presents.data, Array2::zeros((320, 40)));

        let mut pflogo = Image::parse(exe.segment(0xa05));
        pflogo.data = concatenate!(
            Axis(1),
            Array2::zeros((640, 150)),
            pflogo.data,
            Array2::zeros((640, 152)),
        );

        let slides = vec![
            Slide {
                image: logo0,
                gap_frames: 0,
                fade_in_frames: 20,
                fade_out_frames: 20,
                fade_out_tick: 0x12e,
                fade_from_white: false,
            },
            Slide {
                image: logo1,
                gap_frames: 0,
                fade_in_frames: 10,
                fade_out_frames: 20,
                fade_out_tick: 0x26c,
                fade_from_white: true,
            },
            Slide {
                image: logo2,
                gap_frames: 1,
                fade_in_frames: 20,
                fade_out_frames: 20,
                fade_out_tick: 0x37b,
                fade_from_white: false,
            },
            Slide {
                image: presents,
                gap_frames: 0,
                fade_in_frames: 8,
                fade_out_frames: 20,
                fade_out_tick: 1,
                fade_from_white: false,
            },
            Slide {
                image: pflogo,
                gap_frames: 1,
                fade_in_frames: 20,
                fade_out_frames: 20,
                fade_out_tick: 0x5dc,
                fade_from_white: false,
            },
        ];

        let mut left = Image::parse(exe.segment(0x1c71));
        left.data = left.data.slice(s![..130, ..240]).to_owned();

        let read_table = |seg| {
            let mut table = Image::parse(exe.segment(seg));
            table.data = table.data.slice(s![..440, ..95]).to_owned();
            table
        };
        let table1 = read_table(0x2003);
        let table2 = read_table(0x2465);
        let table3 = read_table(0x2901);
        let table4 = read_table(0x2d94);

        let font_hq = Image::parse(exe.segment(0x677));
        let mut font_lq = Image::parse(exe.segment(0x870));
        font_lq.data = font_lq.data.slice(s![.., ..28]).to_owned();

        let mut hiscores_lq = Image::parse(exe.segment(0x3301));
        hiscores_lq.data = hiscores_lq.data.slice(s![..400, ..40]).to_owned();
        let mut hiscores_hq = Image::parse(exe.segment(0x3499));
        hiscores_hq.data = hiscores_hq.data.slice(s![..400, ..40]).to_owned();

        let mut text_pages = vec![];
        for i in 0..10 {
            let mut ptr = exe.data_word(0x4c03 + i * 2);
            if ptr == 0xffff {
                text_pages.push(TextPage::HiScores(if i & 1 == 0 {
                    TableSet::Table12
                } else {
                    TableSet::Table34
                }));
            } else {
                let mut lines = vec![];
                for _ in 0..12 {
                    let mut line = vec![];
                    for _ in 0..24 {
                        let byte = exe.data_byte(ptr);
                        ptr += 1;
                        if byte == 0 {
                            break;
                        }
                        line.push(byte);
                    }
                    lines.push(line);
                }
                text_pages.push(TextPage::Text(lines));
            }
        }

        let left_text_menu = get_left_text(&exe, 0x288e);
        let left_text_options = get_left_text(&exe, 0x2906);

        let mut warp_table = vec![];
        let mut warp_frames = 0;
        let mut pos = 0x597a;
        loop {
            let byte = exe.data_byte(pos);
            pos += 1;
            if byte == 0xff {
                warp_frames += 1;
                if exe.data_byte(pos) == 0xff {
                    break;
                }
            } else {
                let idx = byte as usize;
                while idx >= warp_table.len() {
                    warp_table.push(None);
                }
                assert_eq!(warp_table[idx], None);
                warp_table[idx] = Some(warp_frames);
            }
        }
        let warp_table = warp_table.into_iter().map(|x| x.unwrap()).collect();

        Ok(Self {
            slides,
            left,
            table1,
            table2,
            table3,
            table4,
            hiscores_lq,
            hiscores_hq,
            font_lq,
            font_hq,
            text_pages,
            left_text_menu,
            left_text_options,
            warp_table,
            warp_frames,
        })
    }
}

pub const CGA_FONT: [[u8; 8]; 0x80] = [
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e],
    [0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e],
    [0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00],
    [0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00],
    [0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c],
    [0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c],
    [0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00],
    [0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff],
    [0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00],
    [0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff],
    [0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78],
    [0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18],
    [0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0],
    [0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0],
    [0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99],
    [0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00],
    [0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00],
    [0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18],
    [0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00],
    [0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00],
    [0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78],
    [0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00],
    [0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff],
    [0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00],
    [0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00],
    [0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00],
    [0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00],
    [0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00],
    [0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00],
    [0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00],
    [0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00],
    [0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00],
    [0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00],
    [0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00],
    [0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00],
    [0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00],
    [0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00],
    [0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00],
    [0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60],
    [0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00],
    [0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00],
    [0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00],
    [0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00],
    [0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00],
    [0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00],
    [0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00],
    [0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00],
    [0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00],
    [0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00],
    [0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00],
    [0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00],
    [0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00],
    [0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60],
    [0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00],
    [0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00],
    [0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00],
    [0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00],
    [0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00],
    [0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00],
    [0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00],
    [0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00],
    [0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00],
    [0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00],
    [0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00],
    [0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00],
    [0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00],
    [0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00],
    [0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00],
    [0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00],
    [0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00],
    [0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00],
    [0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00],
    [0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00],
    [0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00],
    [0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00],
    [0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00],
    [0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00],
    [0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00],
    [0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00],
    [0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00],
    [0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00],
    [0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00],
    [0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00],
    [0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00],
    [0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00],
    [0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00],
    [0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00],
    [0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff],
    [0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00],
    [0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00],
    [0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00],
    [0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00],
    [0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00],
    [0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00],
    [0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8],
    [0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00],
    [0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00],
    [0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78],
    [0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00],
    [0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00],
    [0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00],
    [0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00],
    [0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00],
    [0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0],
    [0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e],
    [0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00],
    [0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00],
    [0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00],
    [0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00],
    [0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00],
    [0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00],
    [0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00],
    [0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8],
    [0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00],
    [0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00],
    [0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00],
    [0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00],
    [0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00],
];
